# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pybsimu')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pybsimu')
    _pybsimu = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybsimu', [dirname(__file__)])
        except ImportError:
            import _pybsimu
            return _pybsimu
        try:
            _mod = imp.load_module('_pybsimu', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pybsimu = swig_import_helper()
    del swig_import_helper
else:
    import _pybsimu
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


VEC3D_HPP = _pybsimu.VEC3D_HPP
class Vec3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_Vec3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_Vec3D
    __del__ = lambda self: None

    def __call__(self, *args):
        return _pybsimu.Vec3D___call__(self, *args)

    def __add__(self, vec):
        return _pybsimu.Vec3D___add__(self, vec)

    def __sub__(self, vec):
        return _pybsimu.Vec3D___sub__(self, vec)

    def __iadd__(self, vec):
        return _pybsimu.Vec3D___iadd__(self, vec)

    def __mul__(self, *args):
        return _pybsimu.Vec3D___mul__(self, *args)

    def __neg__(self):
        return _pybsimu.Vec3D___neg__(self)

    def __imul__(self, x):
        return _pybsimu.Vec3D___imul__(self, x)

    def __itruediv__(self, *args):
        return _pybsimu.Vec3D___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ne__(self, x):
        return _pybsimu.Vec3D___ne__(self, x)

    def __eq__(self, x):
        return _pybsimu.Vec3D___eq__(self, x)

    def approx(self, x, eps=1.0e-6):
        return _pybsimu.Vec3D_approx(self, x, eps)

    def assign(self, *args):
        return _pybsimu.Vec3D_assign(self, *args)

    def abs(self):
        return _pybsimu.Vec3D_abs(self)

    def normalize(self):
        return _pybsimu.Vec3D_normalize(self)

    def norm2(self):
        return _pybsimu.Vec3D_norm2(self)

    def max(self):
        return _pybsimu.Vec3D_max(self)

    def ssqr(self):
        return _pybsimu.Vec3D_ssqr(self)

    def min_element(self):
        return _pybsimu.Vec3D_min_element(self)

    def arb_perpendicular(self):
        return _pybsimu.Vec3D_arb_perpendicular(self)

    def save(self, os):
        return _pybsimu.Vec3D_save(self, os)
    if _newclass:
        standard_basis = staticmethod(_pybsimu.Vec3D_standard_basis)
    else:
        standard_basis = _pybsimu.Vec3D_standard_basis

    def x(self):
        return _pybsimu.Vec3D_x(self)

    def y(self):
        return _pybsimu.Vec3D_y(self)

    def z(self):
        return _pybsimu.Vec3D_z(self)
Vec3D_swigregister = _pybsimu.Vec3D_swigregister
Vec3D_swigregister(Vec3D)

def Vec3D_standard_basis(i):
    return _pybsimu.Vec3D_standard_basis(i)
Vec3D_standard_basis = _pybsimu.Vec3D_standard_basis

def cross(vec1, vec2):
    return _pybsimu.cross(vec1, vec2)
cross = _pybsimu.cross

def norm2(vec):
    return _pybsimu.norm2(vec)
norm2 = _pybsimu.norm2

def ssqr(vec):
    return _pybsimu.ssqr(vec)
ssqr = _pybsimu.ssqr

class Int3D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_Int3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_Int3D
    __del__ = lambda self: None

    def __call__(self, *args):
        return _pybsimu.Int3D___call__(self, *args)

    def __add__(self, i):
        return _pybsimu.Int3D___add__(self, i)

    def __sub__(self, i):
        return _pybsimu.Int3D___sub__(self, i)

    def times(self, *args):
        return _pybsimu.Int3D_times(self, *args)

    def __ne__(self, i):
        return _pybsimu.Int3D___ne__(self, i)

    def __eq__(self, i):
        return _pybsimu.Int3D___eq__(self, i)

    def max(self):
        return _pybsimu.Int3D_max(self)

    def save(self, s):
        return _pybsimu.Int3D_save(self, s)

    def x(self):
        return _pybsimu.Int3D_x(self)

    def y(self):
        return _pybsimu.Int3D_y(self)

    def z(self):
        return _pybsimu.Int3D_z(self)
Int3D_swigregister = _pybsimu.Int3D_swigregister
Int3D_swigregister(Int3D)

def times(*args):
    return _pybsimu.times(*args)
times = _pybsimu.times

MESH_HPP = _pybsimu.MESH_HPP
class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_Mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_Mesh
    __del__ = lambda self: None

    def reset(self, geom_mode, size, origo, h):
        return _pybsimu.Mesh_reset(self, geom_mode, size, origo, h)

    def geom_mode(self):
        return _pybsimu.Mesh_geom_mode(self)

    def dim(self):
        return _pybsimu.Mesh_dim(self)

    def size(self, *args):
        return _pybsimu.Mesh_size(self, *args)

    def nodecount(self):
        return _pybsimu.Mesh_nodecount(self)

    def origo(self, *args):
        return _pybsimu.Mesh_origo(self, *args)

    def max(self, *args):
        return _pybsimu.Mesh_max(self, *args)

    def h(self):
        return _pybsimu.Mesh_h(self)

    def div_h(self):
        return _pybsimu.Mesh_div_h(self)

    def closest_node(self, x):
        return _pybsimu.Mesh_closest_node(self, x)

    def mesh_number(self, x):
        return _pybsimu.Mesh_mesh_number(self, x)

    def coord_of_node(self, n):
        return _pybsimu.Mesh_coord_of_node(self, n)

    def save(self, os):
        return _pybsimu.Mesh_save(self, os)

    def __eq__(self, m):
        return _pybsimu.Mesh___eq__(self, m)

    def __ne__(self, m):
        return _pybsimu.Mesh___ne__(self, m)

    def debug_print(self, os):
        return _pybsimu.Mesh_debug_print(self, os)
Mesh_swigregister = _pybsimu.Mesh_swigregister
Mesh_swigregister(Mesh)

GEOMETRY_HPP = _pybsimu.GEOMETRY_HPP
class Bound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_Bound(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def type(self):
        return _pybsimu.Bound_type(self)

    def set_value(self, value):
        return _pybsimu.Bound_set_value(self, value)

    def value(self, *args):
        return _pybsimu.Bound_value(self, *args)

    def is_constant(self):
        return _pybsimu.Bound_is_constant(self)

    def save(self, os):
        return _pybsimu.Bound_save(self, os)
    __swig_destroy__ = _pybsimu.delete_Bound
    __del__ = lambda self: None
Bound_swigregister = _pybsimu.Bound_swigregister
Bound_swigregister(Bound)

def __str__(*args):
    return _pybsimu.__str__(*args)
__str__ = _pybsimu.__str__

SMESH_NODE_ID_MASK = _pybsimu.SMESH_NODE_ID_MASK
SMESH_NODE_ID_PURE_VACUUM = _pybsimu.SMESH_NODE_ID_PURE_VACUUM
SMESH_NODE_ID_NEAR_SOLID = _pybsimu.SMESH_NODE_ID_NEAR_SOLID
SMESH_NODE_ID_NEUMANN = _pybsimu.SMESH_NODE_ID_NEUMANN
SMESH_NODE_ID_ROUGH_BOUNDARY = _pybsimu.SMESH_NODE_ID_ROUGH_BOUNDARY
SMESH_NODE_ID_PURE_VACUUM_FIX = _pybsimu.SMESH_NODE_ID_PURE_VACUUM_FIX
SMESH_NODE_ID_NEAR_SOLID_FIX = _pybsimu.SMESH_NODE_ID_NEAR_SOLID_FIX
SMESH_NODE_ID_DIRICHLET = _pybsimu.SMESH_NODE_ID_DIRICHLET
SMESH_NODE_ID_FINE_BOUNDARY = _pybsimu.SMESH_NODE_ID_FINE_BOUNDARY
SMESH_NODE_FIXED = _pybsimu.SMESH_NODE_FIXED
SMESH_BOUNDARY_NUMBER_MASK = _pybsimu.SMESH_BOUNDARY_NUMBER_MASK
SMESH_NEAR_SOLID_INDEX_MASK = _pybsimu.SMESH_NEAR_SOLID_INDEX_MASK
class Geometry(Mesh):
    __swig_setmethods__ = {}
    for _s in [Mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_Geometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_Geometry
    __del__ = lambda self: None

    def number_of_solids(self):
        return _pybsimu.Geometry_number_of_solids(self)

    def number_of_boundaries(self):
        return _pybsimu.Geometry_number_of_boundaries(self)

    def set_solid(self, n, s):
        return _pybsimu.Geometry_set_solid(self, n, s)

    def get_solid(self, n):
        return _pybsimu.Geometry_get_solid(self, n)

    def set_boundary(self, n, b):
        return _pybsimu.Geometry_set_boundary(self, n, b)

    def get_boundary(self, n):
        return _pybsimu.Geometry_get_boundary(self, n)

    def have_solid_data(self):
        return _pybsimu.Geometry_have_solid_data(self)

    def inside(self, *args):
        return _pybsimu.Geometry_inside(self, *args)

    def bracket_surface(self, n, xin, xout, xsurf):
        return _pybsimu.Geometry_bracket_surface(self, n, xin, xout, xsurf)

    def surface_normal(self, x):
        return _pybsimu.Geometry_surface_normal(self, x)

    def built(self):
        return _pybsimu.Geometry_built(self)

    def build_mesh(self):
        return _pybsimu.Geometry_build_mesh(self)

    def mesh(self, *args):
        return _pybsimu.Geometry_mesh(self, *args)

    def mesh_check(self, *args):
        return _pybsimu.Geometry_mesh_check(self, *args)

    def is_near_solid(self, i, j, k):
        return _pybsimu.Geometry_is_near_solid(self, i, j, k)

    def nearsolid_ptr(self, index):
        return _pybsimu.Geometry_nearsolid_ptr(self, index)

    def solid_dist(self, *args):
        return _pybsimu.Geometry_solid_dist(self, *args)

    def build_surface(self):
        return _pybsimu.Geometry_build_surface(self)

    def surface_built(self):
        return _pybsimu.Geometry_surface_built(self)

    def surface_inside(self, x):
        return _pybsimu.Geometry_surface_inside(self, x)

    def surface_vertexc(self):
        return _pybsimu.Geometry_surface_vertexc(self)

    def surface_vertex(self, a):
        return _pybsimu.Geometry_surface_vertex(self, a)

    def surface_triangle_normal(self, *args):
        return _pybsimu.Geometry_surface_triangle_normal(self, *args)

    def surface_triangle(self, a):
        return _pybsimu.Geometry_surface_triangle(self, a)

    def surface_triangle_ptr(self, i, j, k):
        return _pybsimu.Geometry_surface_triangle_ptr(self, i, j, k)

    def surface_trianglec(self, *args):
        return _pybsimu.Geometry_surface_trianglec(self, *args)

    def save(self, *args):
        return _pybsimu.Geometry_save(self, *args)

    def debug_print(self, os):
        return _pybsimu.Geometry_debug_print(self, os)
Geometry_swigregister = _pybsimu.Geometry_swigregister
Geometry_swigregister(Geometry)

SOLID_HPP = _pybsimu.SOLID_HPP
class Solid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solid, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_Solid
    __del__ = lambda self: None

    def inside(self, x):
        return _pybsimu.Solid_inside(self, x)

    def reset_transformation(self):
        return _pybsimu.Solid_reset_transformation(self)

    def set_transformation(self, T):
        return _pybsimu.Solid_set_transformation(self, T)

    def translate(self, dx):
        return _pybsimu.Solid_translate(self, dx)

    def scale(self, *args):
        return _pybsimu.Solid_scale(self, *args)

    def rotate_x(self, a):
        return _pybsimu.Solid_rotate_x(self, a)

    def rotate_y(self, a):
        return _pybsimu.Solid_rotate_y(self, a)

    def rotate_z(self, a):
        return _pybsimu.Solid_rotate_z(self, a)

    def debug_print(self, os):
        return _pybsimu.Solid_debug_print(self, os)

    def save(self, s):
        return _pybsimu.Solid_save(self, s)
Solid_swigregister = _pybsimu.Solid_swigregister
Solid_swigregister(Solid)

FUNC_SOLID_HPP = _pybsimu.FUNC_SOLID_HPP
class FuncSolid(Solid):
    __swig_setmethods__ = {}
    for _s in [Solid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuncSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [Solid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuncSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_FuncSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_FuncSolid
    __del__ = lambda self: None

    def inside(self, x):
        return _pybsimu.FuncSolid_inside(self, x)

    def debug_print(self, os):
        return _pybsimu.FuncSolid_debug_print(self, os)

    def save(self, os):
        return _pybsimu.FuncSolid_save(self, os)
FuncSolid_swigregister = _pybsimu.FuncSolid_swigregister
FuncSolid_swigregister(FuncSolid)

STLSOLID_HPP = _pybsimu.STLSOLID_HPP
class STLSolid(Solid):
    __swig_setmethods__ = {}
    for _s in [Solid]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, STLSolid, name, value)
    __swig_getmethods__ = {}
    for _s in [Solid]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, STLSolid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_STLSolid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_STLSolid
    __del__ = lambda self: None

    def inside(self, x):
        return _pybsimu.STLSolid_inside(self, x)

    def add_stl_file(self, stl):
        return _pybsimu.STLSolid_add_stl_file(self, stl)

    def get_stl_file(self, i=0):
        return _pybsimu.STLSolid_get_stl_file(self, i)

    def debug_print(self, os):
        return _pybsimu.STLSolid_debug_print(self, os)

    def save(self, s):
        return _pybsimu.STLSolid_save(self, s)
STLSolid_swigregister = _pybsimu.STLSolid_swigregister
STLSolid_swigregister(STLSolid)

STLFILE_HPP = _pybsimu.STLFILE_HPP
class STLFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STLFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STLFile, name)
    __repr__ = _swig_repr

    def __init__(self, filename, vertex_matching_eps=1.0e-9, signed_volume_eps=1.0e-15):
        this = _pybsimu.new_STLFile(filename, vertex_matching_eps, signed_volume_eps)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_STLFile
    __del__ = lambda self: None

    def save(self, filename, ascii=True):
        return _pybsimu.STLFile_save(self, filename, ascii)

    def inside(self, x):
        return _pybsimu.STLFile_inside(self, x)

    def get_bbox(self, min, max):
        return _pybsimu.STLFile_get_bbox(self, min, max)

    def debug_print(self, os):
        return _pybsimu.STLFile_debug_print(self, os)
STLFile_swigregister = _pybsimu.STLFile_swigregister
STLFile_swigregister(STLFile)

IBSIMU_HPP = _pybsimu.IBSIMU_HPP
MSG_COUNT = _pybsimu.MSG_COUNT
MSG_VERBOSE = _pybsimu.MSG_VERBOSE
MSG_WARNING = _pybsimu.MSG_WARNING
MSG_ERROR = _pybsimu.MSG_ERROR
MSG_DEBUG_GENERAL = _pybsimu.MSG_DEBUG_GENERAL
MSG_DEBUG_DXF = _pybsimu.MSG_DEBUG_DXF
RNG_SOBOL = _pybsimu.RNG_SOBOL
RNG_MT = _pybsimu.RNG_MT
class IBSimu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IBSimu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IBSimu, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pybsimu.new_IBSimu()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_IBSimu
    __del__ = lambda self: None

    def set_message_output(self, *args):
        return _pybsimu.IBSimu_set_message_output(self, *args)

    def message(self, *args):
        return _pybsimu.IBSimu_message(self, *args)

    def flush(self, finishlines=True):
        return _pybsimu.IBSimu_flush(self, finishlines)

    def inc_indent(self):
        return _pybsimu.IBSimu_inc_indent(self)

    def dec_indent(self):
        return _pybsimu.IBSimu_dec_indent(self)

    def output_is_cout(self):
        return _pybsimu.IBSimu_output_is_cout(self)

    def set_message_threshold(self, type, level):
        return _pybsimu.IBSimu_set_message_threshold(self, type, level)

    def get_message_threshold(self, type):
        return _pybsimu.IBSimu_get_message_threshold(self, type)

    def set_thread_count(self, threadcount):
        return _pybsimu.IBSimu_set_thread_count(self, threadcount)

    def get_thread_count(self):
        return _pybsimu.IBSimu_get_thread_count(self)

    def set_rng_type(self, type):
        return _pybsimu.IBSimu_set_rng_type(self, type)

    def get_rng_type(self):
        return _pybsimu.IBSimu_get_rng_type(self)
IBSimu_swigregister = _pybsimu.IBSimu_swigregister
IBSimu_swigregister(IBSimu)

ERROR_HPP = _pybsimu.ERROR_HPP
class ErrorLocation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ErrorLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def file(self):
        return _pybsimu.ErrorLocation_file(self)

    def line(self):
        return _pybsimu.ErrorLocation_line(self)

    def func(self):
        return _pybsimu.ErrorLocation_func(self)
    __swig_destroy__ = _pybsimu.delete_ErrorLocation
    __del__ = lambda self: None
ErrorLocation_swigregister = _pybsimu.ErrorLocation_swigregister
ErrorLocation_swigregister(ErrorLocation)
cvar = _pybsimu.cvar
ibsimu = cvar.ibsimu

class ExceptionTracer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExceptionTracer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExceptionTracer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pybsimu.new_ExceptionTracer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def print_trace(self, os):
        return _pybsimu.ExceptionTracer_print_trace(self, os)
    __swig_destroy__ = _pybsimu.delete_ExceptionTracer
    __del__ = lambda self: None
ExceptionTracer_swigregister = _pybsimu.ExceptionTracer_swigregister
ExceptionTracer_swigregister(ExceptionTracer)

class Error(ExceptionTracer):
    __swig_setmethods__ = {}
    for _s in [ExceptionTracer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    for _s in [ExceptionTracer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_Error(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_error_message(self):
        return _pybsimu.Error_get_error_message(self)

    def print_error_message(self, os, traceprint=True):
        return _pybsimu.Error_print_error_message(self, os, traceprint)
    __swig_destroy__ = _pybsimu.delete_Error
    __del__ = lambda self: None
Error_swigregister = _pybsimu.Error_swigregister
Error_swigregister(Error)

class ErrorNoMem(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorNoMem, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorNoMem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ErrorNoMem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ErrorNoMem
    __del__ = lambda self: None
ErrorNoMem_swigregister = _pybsimu.ErrorNoMem_swigregister
ErrorNoMem_swigregister(ErrorNoMem)

class ErrorErrno(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorErrno, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorErrno, name)
    __repr__ = _swig_repr

    def __init__(self, loc):
        this = _pybsimu.new_ErrorErrno(loc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ErrorErrno
    __del__ = lambda self: None
ErrorErrno_swigregister = _pybsimu.ErrorErrno_swigregister
ErrorErrno_swigregister(ErrorErrno)

class ErrorUnimplemented(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorUnimplemented, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorUnimplemented, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ErrorUnimplemented(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ErrorUnimplemented
    __del__ = lambda self: None
ErrorUnimplemented_swigregister = _pybsimu.ErrorUnimplemented_swigregister
ErrorUnimplemented_swigregister(ErrorUnimplemented)

class ErrorAssert(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorAssert, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorAssert, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ErrorAssert(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ErrorAssert
    __del__ = lambda self: None
ErrorAssert_swigregister = _pybsimu.ErrorAssert_swigregister
ErrorAssert_swigregister(ErrorAssert)

class ErrorDim(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorDim, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorDim, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ErrorDim(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ErrorDim
    __del__ = lambda self: None
ErrorDim_swigregister = _pybsimu.ErrorDim_swigregister
ErrorDim_swigregister(ErrorDim)

class ErrorRange(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorRange, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ErrorRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ErrorRange
    __del__ = lambda self: None
ErrorRange_swigregister = _pybsimu.ErrorRange_swigregister
ErrorRange_swigregister(ErrorRange)

class SignalHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignalHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SignalHandler, name)
    __repr__ = _swig_repr
    if _newclass:
        signal_handler_SIGSEGV = staticmethod(_pybsimu.SignalHandler_signal_handler_SIGSEGV)
    else:
        signal_handler_SIGSEGV = _pybsimu.SignalHandler_signal_handler_SIGSEGV
    if _newclass:
        signal_handler_SIGTERM = staticmethod(_pybsimu.SignalHandler_signal_handler_SIGTERM)
    else:
        signal_handler_SIGTERM = _pybsimu.SignalHandler_signal_handler_SIGTERM

    def __init__(self):
        this = _pybsimu.new_SignalHandler()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_SignalHandler
    __del__ = lambda self: None
SignalHandler_swigregister = _pybsimu.SignalHandler_swigregister
SignalHandler_swigregister(SignalHandler)

def SignalHandler_signal_handler_SIGSEGV(signum, info, ptr):
    return _pybsimu.SignalHandler_signal_handler_SIGSEGV(signum, info, ptr)
SignalHandler_signal_handler_SIGSEGV = _pybsimu.SignalHandler_signal_handler_SIGSEGV

def SignalHandler_signal_handler_SIGTERM(signum, info, ptr):
    return _pybsimu.SignalHandler_signal_handler_SIGTERM(signum, info, ptr)
SignalHandler_signal_handler_SIGTERM = _pybsimu.SignalHandler_signal_handler_SIGTERM

CALLBACK_HPP = _pybsimu.CALLBACK_HPP
class CallbackFunctor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackFunctor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackFunctor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pybsimu.new_CallbackFunctor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_CallbackFunctor
    __del__ = lambda self: None
CallbackFunctor_swigregister = _pybsimu.CallbackFunctor_swigregister
CallbackFunctor_swigregister(CallbackFunctor)

class CallbackFunctorD_3D(CallbackFunctor):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackFunctorD_3D, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackFunctorD_3D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_CallbackFunctorD_3D
    __del__ = lambda self: None

    def __call__(self, x, y, z):
        return _pybsimu.CallbackFunctorD_3D___call__(self, x, y, z)
CallbackFunctorD_3D_swigregister = _pybsimu.CallbackFunctorD_3D_swigregister
CallbackFunctorD_3D_swigregister(CallbackFunctorD_3D)

class CallbackFunctorD_V(CallbackFunctor):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackFunctorD_V, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackFunctorD_V, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_CallbackFunctorD_V
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.CallbackFunctorD_V___call__(self, x)
CallbackFunctorD_V_swigregister = _pybsimu.CallbackFunctorD_V_swigregister
CallbackFunctorD_V_swigregister(CallbackFunctorD_V)

class CallbackFunctorB_3D(CallbackFunctor):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackFunctorB_3D, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackFunctorB_3D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_CallbackFunctorB_3D
    __del__ = lambda self: None

    def __call__(self, x, y, z):
        return _pybsimu.CallbackFunctorB_3D___call__(self, x, y, z)
CallbackFunctorB_3D_swigregister = _pybsimu.CallbackFunctorB_3D_swigregister
CallbackFunctorB_3D_swigregister(CallbackFunctorB_3D)

class CallbackFunctorB_V(CallbackFunctor):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackFunctorB_V, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackFunctorB_V, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_CallbackFunctorB_V
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.CallbackFunctorB_V___call__(self, x)
CallbackFunctorB_V_swigregister = _pybsimu.CallbackFunctorB_V_swigregister
CallbackFunctorB_V_swigregister(CallbackFunctorB_V)

class CallbackFunctorD_D(CallbackFunctor):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallbackFunctorD_D, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallbackFunctorD_D, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_CallbackFunctorD_D
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.CallbackFunctorD_D___call__(self, x)
CallbackFunctorD_D_swigregister = _pybsimu.CallbackFunctorD_D_swigregister
CallbackFunctorD_D_swigregister(CallbackFunctorD_D)

EPOT_SOLVER_HPP = _pybsimu.EPOT_SOLVER_HPP
class InitialPlasma(CallbackFunctorB_V):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctorB_V]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InitialPlasma, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctorB_V]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InitialPlasma, name)
    __repr__ = _swig_repr

    def __init__(self, axis, val):
        this = _pybsimu.new_InitialPlasma(axis, val)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_InitialPlasma
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.InitialPlasma___call__(self, x)
InitialPlasma_swigregister = _pybsimu.InitialPlasma_swigregister
InitialPlasma_swigregister(InitialPlasma)

PLASMA_NONE = _pybsimu.PLASMA_NONE
PLASMA_PEXP_INITIAL = _pybsimu.PLASMA_PEXP_INITIAL
PLASMA_NSIMP_INITIAL = _pybsimu.PLASMA_NSIMP_INITIAL
PLASMA_PEXP = _pybsimu.PLASMA_PEXP
PLASMA_NSIMP = _pybsimu.PLASMA_NSIMP
PLASMA_SHIELD = _pybsimu.PLASMA_SHIELD
EPOT_SOLVER_BXMIN = _pybsimu.EPOT_SOLVER_BXMIN
EPOT_SOLVER_BXMAX = _pybsimu.EPOT_SOLVER_BXMAX
EPOT_SOLVER_BYMIN = _pybsimu.EPOT_SOLVER_BYMIN
EPOT_SOLVER_BYMAX = _pybsimu.EPOT_SOLVER_BYMAX
EPOT_SOLVER_BZMIN = _pybsimu.EPOT_SOLVER_BZMIN
EPOT_SOLVER_BZMAX = _pybsimu.EPOT_SOLVER_BZMAX
class EpotSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpotSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EpotSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_EpotSolver
    __del__ = lambda self: None

    def set_parameters(self, epsolver):
        return _pybsimu.EpotSolver_set_parameters(self, epsolver)

    def set_forced_potential_volume(self, *args):
        return _pybsimu.EpotSolver_set_forced_potential_volume(self, *args)

    def set_initial_plasma(self, Up, init_plasma_func):
        return _pybsimu.EpotSolver_set_initial_plasma(self, Up, init_plasma_func)

    def set_plasma_calc_region(self, plasma_calc_func):
        return _pybsimu.EpotSolver_set_plasma_calc_region(self, plasma_calc_func)

    def set_pexp_plasma(self, rhoe, Te, Up):
        return _pybsimu.EpotSolver_set_pexp_plasma(self, rhoe, Te, Up)

    def set_nsimp_initial_plasma(self, init_plasma_func):
        return _pybsimu.EpotSolver_set_nsimp_initial_plasma(self, init_plasma_func)

    def set_nsimp_plasma(self, rhop, Ep, rhoi, Ei):
        return _pybsimu.EpotSolver_set_nsimp_plasma(self, rhop, Ep, rhoi, Ei)

    def set_shield_plasma(self, Tm, Um):
        return _pybsimu.EpotSolver_set_shield_plasma(self, Tm, Um)

    def solve(self, epot, scharge):
        return _pybsimu.EpotSolver_solve(self, epot, scharge)

    def linear(self):
        return _pybsimu.EpotSolver_linear(self)

    def geometry(self):
        return _pybsimu.EpotSolver_geometry(self)

    def debug_print(self, os):
        return _pybsimu.EpotSolver_debug_print(self, os)

    def save(self, s):
        return _pybsimu.EpotSolver_save(self, s)
EpotSolver_swigregister = _pybsimu.EpotSolver_swigregister
EpotSolver_swigregister(EpotSolver)

EPOT_MATRIXSOLVER_HPP = _pybsimu.EPOT_MATRIXSOLVER_HPP
N2D_TYPE_MASK = _pybsimu.N2D_TYPE_MASK
N2D_TYPE_FIXED = _pybsimu.N2D_TYPE_FIXED
N2D_TYPE_FREE = _pybsimu.N2D_TYPE_FREE
N2D_INDEX_MASK = _pybsimu.N2D_INDEX_MASK
class EpotMatrixSolver(EpotSolver):
    __swig_setmethods__ = {}
    for _s in [EpotSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpotMatrixSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [EpotSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EpotMatrixSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_EpotMatrixSolver
    __del__ = lambda self: None

    def debug_print(self, os):
        return _pybsimu.EpotMatrixSolver_debug_print(self, os)

    def save(self, s):
        return _pybsimu.EpotMatrixSolver_save(self, s)
EpotMatrixSolver_swigregister = _pybsimu.EpotMatrixSolver_swigregister
EpotMatrixSolver_swigregister(EpotMatrixSolver)

EPOT_BICGSTABSOLVER_HPP = _pybsimu.EPOT_BICGSTABSOLVER_HPP
class EpotBiCGSTABSolver(EpotMatrixSolver):
    __swig_setmethods__ = {}
    for _s in [EpotMatrixSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpotBiCGSTABSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [EpotMatrixSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EpotBiCGSTABSolver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_EpotBiCGSTABSolver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_EpotBiCGSTABSolver
    __del__ = lambda self: None

    def set_preconditioner(self, pc):
        return _pybsimu.EpotBiCGSTABSolver_set_preconditioner(self, pc)

    def set_gnewton(self, enable):
        return _pybsimu.EpotBiCGSTABSolver_set_gnewton(self, enable)

    def set_eps(self, eps):
        return _pybsimu.EpotBiCGSTABSolver_set_eps(self, eps)

    def set_imax(self, imax):
        return _pybsimu.EpotBiCGSTABSolver_set_imax(self, imax)

    def set_newton_imax(self, newton_imax):
        return _pybsimu.EpotBiCGSTABSolver_set_newton_imax(self, newton_imax)

    def set_newton_eps(self, eps):
        return _pybsimu.EpotBiCGSTABSolver_set_newton_eps(self, eps)

    def get_newton_residual(self):
        return _pybsimu.EpotBiCGSTABSolver_get_newton_residual(self)

    def get_newton_residual_norm(self):
        return _pybsimu.EpotBiCGSTABSolver_get_newton_residual_norm(self)

    def get_newton_step(self):
        return _pybsimu.EpotBiCGSTABSolver_get_newton_step(self)

    def get_newton_step_norm(self):
        return _pybsimu.EpotBiCGSTABSolver_get_newton_step_norm(self)

    def get_scaled_residual(self):
        return _pybsimu.EpotBiCGSTABSolver_get_scaled_residual(self)

    def get_error_estimate(self):
        return _pybsimu.EpotBiCGSTABSolver_get_error_estimate(self)

    def get_iter(self):
        return _pybsimu.EpotBiCGSTABSolver_get_iter(self)

    def set_analysis_callback(self, func):
        return _pybsimu.EpotBiCGSTABSolver_set_analysis_callback(self, func)

    def set_analysis_callback_nonlinear(self, func):
        return _pybsimu.EpotBiCGSTABSolver_set_analysis_callback_nonlinear(self, func)

    def debug_print(self, os):
        return _pybsimu.EpotBiCGSTABSolver_debug_print(self, os)

    def save(self, s):
        return _pybsimu.EpotBiCGSTABSolver_save(self, s)
EpotBiCGSTABSolver_swigregister = _pybsimu.EpotBiCGSTABSolver_swigregister
EpotBiCGSTABSolver_swigregister(EpotBiCGSTABSolver)

FIELD_HPP = _pybsimu.FIELD_HPP
class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_Field
    __del__ = lambda self: None

    def __init__(self):
        this = _pybsimu.new_Field()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
Field_swigregister = _pybsimu.Field_swigregister
Field_swigregister(Field)

VECTORFIELD_HPP = _pybsimu.VECTORFIELD_HPP
class VectorField(Field):
    __swig_setmethods__ = {}
    for _s in [Field]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorField, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorField, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_VectorField
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.VectorField___call__(self, x)

    def get_minmax(self, *args):
        return _pybsimu.VectorField_get_minmax(self, *args)
VectorField_swigregister = _pybsimu.VectorField_swigregister
VectorField_swigregister(VectorField)

MESHVECTORFIELD_HPP = _pybsimu.MESHVECTORFIELD_HPP
class MeshVectorField(VectorField, Mesh):
    __swig_setmethods__ = {}
    for _s in [VectorField, Mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshVectorField, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorField, Mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeshVectorField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_MeshVectorField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_MeshVectorField
    __del__ = lambda self: None

    def set_extrapolation(self, extrpl):
        return _pybsimu.MeshVectorField_set_extrapolation(self, extrpl)

    def reset_transformation(self):
        return _pybsimu.MeshVectorField_reset_transformation(self)

    def set_transformation(self, T):
        return _pybsimu.MeshVectorField_set_transformation(self, T)

    def translate(self, dx):
        return _pybsimu.MeshVectorField_translate(self, dx)

    def scale(self, sx):
        return _pybsimu.MeshVectorField_scale(self, sx)

    def rotate_x(self, a):
        return _pybsimu.MeshVectorField_rotate_x(self, a)

    def rotate_y(self, a):
        return _pybsimu.MeshVectorField_rotate_y(self, a)

    def rotate_z(self, a):
        return _pybsimu.MeshVectorField_rotate_z(self, a)

    def clear(self):
        return _pybsimu.MeshVectorField_clear(self)

    def reset(self, geom_mode, fout, size, origo, h):
        return _pybsimu.MeshVectorField_reset(self, geom_mode, fout, size, origo, h)

    def get_minmax(self, *args):
        return _pybsimu.MeshVectorField_get_minmax(self, *args)

    def get_defined_components(self, fout):
        return _pybsimu.MeshVectorField_get_defined_components(self, fout)

    def copy(self, f):
        return _pybsimu.MeshVectorField_copy(self, f)

    def __iadd__(self, f):
        return _pybsimu.MeshVectorField___iadd__(self, f)

    def __imul__(self, x):
        return _pybsimu.MeshVectorField___imul__(self, x)

    def __itruediv__(self, *args):
        return _pybsimu.MeshVectorField___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def set(self, *args):
        return _pybsimu.MeshVectorField_set(self, *args)

    def __call__(self, *args):
        return _pybsimu.MeshVectorField___call__(self, *args)

    def save(self, *args):
        return _pybsimu.MeshVectorField_save(self, *args)

    def debug_print(self, os):
        return _pybsimu.MeshVectorField_debug_print(self, os)
MeshVectorField_swigregister = _pybsimu.MeshVectorField_swigregister
MeshVectorField_swigregister(MeshVectorField)

PARTICLEDATABASE_HPP = _pybsimu.PARTICLEDATABASE_HPP
class TrajectoryHandlerCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajectoryHandlerCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajectoryHandlerCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_TrajectoryHandlerCallback
    __del__ = lambda self: None

    def __call__(self, particle, xcur, xend):
        return _pybsimu.TrajectoryHandlerCallback___call__(self, particle, xcur, xend)
TrajectoryHandlerCallback_swigregister = _pybsimu.TrajectoryHandlerCallback_swigregister
TrajectoryHandlerCallback_swigregister(TrajectoryHandlerCallback)

class TrajectoryEndCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajectoryEndCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajectoryEndCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_TrajectoryEndCallback
    __del__ = lambda self: None

    def __call__(self, particle, pdb):
        return _pybsimu.TrajectoryEndCallback___call__(self, particle, pdb)
TrajectoryEndCallback_swigregister = _pybsimu.TrajectoryEndCallback_swigregister
TrajectoryEndCallback_swigregister(TrajectoryEndCallback)

class TrajectorySurfaceCollisionCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrajectorySurfaceCollisionCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrajectorySurfaceCollisionCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_TrajectorySurfaceCollisionCallback
    __del__ = lambda self: None

    def __call__(self, particle, x, tri, s, t):
        return _pybsimu.TrajectorySurfaceCollisionCallback___call__(self, particle, x, tri, s, t)
TrajectorySurfaceCollisionCallback_swigregister = _pybsimu.TrajectorySurfaceCollisionCallback_swigregister
TrajectorySurfaceCollisionCallback_swigregister(TrajectorySurfaceCollisionCallback)

class PPlasmaBfieldSuppression(CallbackFunctorD_V):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctorD_V]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PPlasmaBfieldSuppression, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctorD_V]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PPlasmaBfieldSuppression, name)
    __repr__ = _swig_repr

    def __init__(self, epot, phi):
        this = _pybsimu.new_PPlasmaBfieldSuppression(epot, phi)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_PPlasmaBfieldSuppression
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.PPlasmaBfieldSuppression___call__(self, x)
PPlasmaBfieldSuppression_swigregister = _pybsimu.PPlasmaBfieldSuppression_swigregister
PPlasmaBfieldSuppression_swigregister(PPlasmaBfieldSuppression)

class NPlasmaBfieldSuppression(CallbackFunctorD_V):
    __swig_setmethods__ = {}
    for _s in [CallbackFunctorD_V]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NPlasmaBfieldSuppression, name, value)
    __swig_getmethods__ = {}
    for _s in [CallbackFunctorD_V]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NPlasmaBfieldSuppression, name)
    __repr__ = _swig_repr

    def __init__(self, epot, phi):
        this = _pybsimu.new_NPlasmaBfieldSuppression(epot, phi)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_NPlasmaBfieldSuppression
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.NPlasmaBfieldSuppression___call__(self, x)
NPlasmaBfieldSuppression_swigregister = _pybsimu.NPlasmaBfieldSuppression_swigregister
NPlasmaBfieldSuppression_swigregister(NPlasmaBfieldSuppression)

class ParticleDataBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleDataBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleDataBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_ParticleDataBase
    __del__ = lambda self: None

    def set_thread_count(self, threadcount):
        return _pybsimu.ParticleDataBase_set_thread_count(self, threadcount)

    def set_accuracy(self, epsabs, epsrel):
        return _pybsimu.ParticleDataBase_set_accuracy(self, epsabs, epsrel)

    def set_bfield_suppression(self, functor):
        return _pybsimu.ParticleDataBase_set_bfield_suppression(self, functor)

    def set_trajectory_handler_callback(self, thand_cb):
        return _pybsimu.ParticleDataBase_set_trajectory_handler_callback(self, thand_cb)

    def set_trajectory_end_callback(self, tend_cb):
        return _pybsimu.ParticleDataBase_set_trajectory_end_callback(self, tend_cb)

    def set_trajectory_surface_collision_callback(self, tsur_cb):
        return _pybsimu.ParticleDataBase_set_trajectory_surface_collision_callback(self, tsur_cb)

    def set_relativistic(self, enable):
        return _pybsimu.ParticleDataBase_set_relativistic(self, enable)

    def set_surface_collision(self, surface_collision):
        return _pybsimu.ParticleDataBase_set_surface_collision(self, surface_collision)

    def set_polyint(self, polyint):
        return _pybsimu.ParticleDataBase_set_polyint(self, polyint)

    def get_polyint(self):
        return _pybsimu.ParticleDataBase_get_polyint(self)

    def set_trajectory_interpolation(self, intrp):
        return _pybsimu.ParticleDataBase_set_trajectory_interpolation(self, intrp)

    def get_trajectory_interpolation(self):
        return _pybsimu.ParticleDataBase_get_trajectory_interpolation(self)

    def set_scharge_deposition(self, type):
        return _pybsimu.ParticleDataBase_set_scharge_deposition(self, type)

    def get_scharge_deposition(self):
        return _pybsimu.ParticleDataBase_get_scharge_deposition(self)

    def set_max_steps(self, maxsteps):
        return _pybsimu.ParticleDataBase_set_max_steps(self, maxsteps)

    def set_max_time(self, maxt):
        return _pybsimu.ParticleDataBase_set_max_time(self, maxt)

    def set_save_all_points(self, save_points):
        return _pybsimu.ParticleDataBase_set_save_all_points(self, save_points)

    def set_save_trajectories(self, div):
        return _pybsimu.ParticleDataBase_set_save_trajectories(self, div)

    def get_save_trajectories(self):
        return _pybsimu.ParticleDataBase_get_save_trajectories(self)

    def get_mirror(self, mirror):
        return _pybsimu.ParticleDataBase_get_mirror(self, mirror)

    def get_iteration_number(self):
        return _pybsimu.ParticleDataBase_get_iteration_number(self)

    def get_rhosum(self):
        return _pybsimu.ParticleDataBase_get_rhosum(self)

    def set_rhosum(self, rhosum):
        return _pybsimu.ParticleDataBase_set_rhosum(self, rhosum)

    def get_statistics(self):
        return _pybsimu.ParticleDataBase_get_statistics(self)

    def geom_mode(self):
        return _pybsimu.ParticleDataBase_geom_mode(self)

    def size(self):
        return _pybsimu.ParticleDataBase_size(self)

    def particle(self, *args):
        return _pybsimu.ParticleDataBase_particle(self, *args)

    def traj_length(self, i):
        return _pybsimu.ParticleDataBase_traj_length(self, i)

    def traj_size(self, i):
        return _pybsimu.ParticleDataBase_traj_size(self, i)

    def trajectory_point(self, *args):
        return _pybsimu.ParticleDataBase_trajectory_point(self, *args)

    def trajectories_at_plane(self, tdata, axis, val, diagnostics):
        return _pybsimu.ParticleDataBase_trajectories_at_plane(self, tdata, axis, val, diagnostics)

    def build_trajectory_density_field(self, tdens):
        return _pybsimu.ParticleDataBase_build_trajectory_density_field(self, tdens)

    def clear(self):
        return _pybsimu.ParticleDataBase_clear(self)

    def clear_trajectories(self):
        return _pybsimu.ParticleDataBase_clear_trajectories(self)

    def clear_trajectory(self, a):
        return _pybsimu.ParticleDataBase_clear_trajectory(self, a)

    def reset_trajectories(self):
        return _pybsimu.ParticleDataBase_reset_trajectories(self)

    def reset_trajectory(self, a):
        return _pybsimu.ParticleDataBase_reset_trajectory(self, a)

    def reserve(self, size):
        return _pybsimu.ParticleDataBase_reserve(self, size)

    def iterate_trajectories(self, scharge, efield, bfield):
        return _pybsimu.ParticleDataBase_iterate_trajectories(self, scharge, efield, bfield)

    def step_particles(self, scharge, efield, bfield, dt):
        return _pybsimu.ParticleDataBase_step_particles(self, scharge, efield, bfield, dt)

    def save(self, *args):
        return _pybsimu.ParticleDataBase_save(self, *args)

    def debug_print(self, os):
        return _pybsimu.ParticleDataBase_debug_print(self, os)

    def set_mirror(self, *args):
        return _pybsimu.ParticleDataBase_set_mirror(self, *args)
ParticleDataBase_swigregister = _pybsimu.ParticleDataBase_swigregister
ParticleDataBase_swigregister(ParticleDataBase)

class ParticleDataBase2D(ParticleDataBase):
    __swig_setmethods__ = {}
    for _s in [ParticleDataBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleDataBase2D, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticleDataBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleDataBase2D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ParticleDataBase2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ParticleDataBase2D
    __del__ = lambda self: None

    def assign(self, pdb):
        return _pybsimu.ParticleDataBase2D_assign(self, pdb)

    def particle(self, *args):
        return _pybsimu.ParticleDataBase2D_particle(self, *args)

    def trajectory_point(self, *args):
        return _pybsimu.ParticleDataBase2D_trajectory_point(self, *args)

    def trajectories_at_plane(self, *args):
        return _pybsimu.ParticleDataBase2D_trajectories_at_plane(self, *args)

    def add_particle(self, *args):
        return _pybsimu.ParticleDataBase2D_add_particle(self, *args)

    def add_2d_beam_with_energy(self, N, J, q, m, E, Tp, Tt, x1, y1, x2, y2):
        return _pybsimu.ParticleDataBase2D_add_2d_beam_with_energy(self, N, J, q, m, E, Tp, Tt, x1, y1, x2, y2)

    def add_2d_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, x1, y1, x2, y2):
        return _pybsimu.ParticleDataBase2D_add_2d_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, x1, y1, x2, y2)

    def add_2d_KV_beam_with_emittance(self, N, I, q, m, a, b, e, Ex, x0, y0):
        return _pybsimu.ParticleDataBase2D_add_2d_KV_beam_with_emittance(self, N, I, q, m, a, b, e, Ex, x0, y0)

    def add_2d_gaussian_beam_with_emittance(self, N, I, q, m, a, b, e, Ex, x0, y0):
        return _pybsimu.ParticleDataBase2D_add_2d_gaussian_beam_with_emittance(self, N, I, q, m, a, b, e, Ex, x0, y0)

    def save(self, *args):
        return _pybsimu.ParticleDataBase2D_save(self, *args)

    def debug_print(self, os):
        return _pybsimu.ParticleDataBase2D_debug_print(self, os)
ParticleDataBase2D_swigregister = _pybsimu.ParticleDataBase2D_swigregister
ParticleDataBase2D_swigregister(ParticleDataBase2D)

class ParticleDataBaseCyl(ParticleDataBase):
    __swig_setmethods__ = {}
    for _s in [ParticleDataBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleDataBaseCyl, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticleDataBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleDataBaseCyl, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ParticleDataBaseCyl(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ParticleDataBaseCyl
    __del__ = lambda self: None

    def assign(self, pdb):
        return _pybsimu.ParticleDataBaseCyl_assign(self, pdb)

    def particle(self, *args):
        return _pybsimu.ParticleDataBaseCyl_particle(self, *args)

    def trajectory_point(self, *args):
        return _pybsimu.ParticleDataBaseCyl_trajectory_point(self, *args)

    def trajectories_at_plane(self, *args):
        return _pybsimu.ParticleDataBaseCyl_trajectories_at_plane(self, *args)

    def export_path_manager_data(self, filename, ref_E, ref_q, ref_m, val, Np):
        return _pybsimu.ParticleDataBaseCyl_export_path_manager_data(self, filename, ref_E, ref_q, ref_m, val, Np)

    def add_particle(self, *args):
        return _pybsimu.ParticleDataBaseCyl_add_particle(self, *args)

    def add_2d_beam_with_energy(self, N, J, q, m, E, Tp, Tt, x1, y1, x2, y2):
        return _pybsimu.ParticleDataBaseCyl_add_2d_beam_with_energy(self, N, J, q, m, E, Tp, Tt, x1, y1, x2, y2)

    def add_2d_beam_with_total_energy(self, N, J, q, m, Etot, epot, Tp, Tt, x1, y1, x2, y2):
        return _pybsimu.ParticleDataBaseCyl_add_2d_beam_with_total_energy(self, N, J, q, m, Etot, epot, Tp, Tt, x1, y1, x2, y2)

    def add_2d_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, x1, y1, x2, y2):
        return _pybsimu.ParticleDataBaseCyl_add_2d_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, x1, y1, x2, y2)

    def add_2d_full_gaussian_beam(self, N, I, q, m, Ex, Tp, Tt, x0, dr):
        return _pybsimu.ParticleDataBaseCyl_add_2d_full_gaussian_beam(self, N, I, q, m, Ex, Tp, Tt, x0, dr)

    def add_2d_gaussian_beam_with_emittance(self, N, I, q, m, a, b, e, Ex, x0):
        return _pybsimu.ParticleDataBaseCyl_add_2d_gaussian_beam_with_emittance(self, N, I, q, m, a, b, e, Ex, x0)

    def save(self, *args):
        return _pybsimu.ParticleDataBaseCyl_save(self, *args)

    def debug_print(self, os):
        return _pybsimu.ParticleDataBaseCyl_debug_print(self, os)
ParticleDataBaseCyl_swigregister = _pybsimu.ParticleDataBaseCyl_swigregister
ParticleDataBaseCyl_swigregister(ParticleDataBaseCyl)

class ParticleDataBase3D(ParticleDataBase):
    __swig_setmethods__ = {}
    for _s in [ParticleDataBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticleDataBase3D, name, value)
    __swig_getmethods__ = {}
    for _s in [ParticleDataBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticleDataBase3D, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_ParticleDataBase3D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_ParticleDataBase3D
    __del__ = lambda self: None

    def assign(self, pdb):
        return _pybsimu.ParticleDataBase3D_assign(self, pdb)

    def particle(self, *args):
        return _pybsimu.ParticleDataBase3D_particle(self, *args)

    def trajectory_point(self, *args):
        return _pybsimu.ParticleDataBase3D_trajectory_point(self, *args)

    def trajectories_at_plane(self, *args):
        return _pybsimu.ParticleDataBase3D_trajectories_at_plane(self, *args)

    def add_particle(self, *args):
        return _pybsimu.ParticleDataBase3D_add_particle(self, *args)

    def add_cylindrical_beam_with_total_energy(self, N, J, q, m, Etot, epot, Tp, Tt, c, dir1, dir2, r):
        return _pybsimu.ParticleDataBase3D_add_cylindrical_beam_with_total_energy(self, N, J, q, m, Etot, epot, Tp, Tt, c, dir1, dir2, r)

    def add_cylindrical_beam_with_energy(self, N, J, q, m, E, Tp, Tt, c, dir1, dir2, r):
        return _pybsimu.ParticleDataBase3D_add_cylindrical_beam_with_energy(self, N, J, q, m, E, Tp, Tt, c, dir1, dir2, r)

    def add_cylindrical_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, c, dir1, dir2, r):
        return _pybsimu.ParticleDataBase3D_add_cylindrical_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, c, dir1, dir2, r)

    def add_rectangular_beam_with_energy(self, N, J, q, m, E, Tp, Tt, c, dir1, dir2, size1, size2):
        return _pybsimu.ParticleDataBase3D_add_rectangular_beam_with_energy(self, N, J, q, m, E, Tp, Tt, c, dir1, dir2, size1, size2)

    def add_rectangular_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, c, dir1, dir2, size1, size2):
        return _pybsimu.ParticleDataBase3D_add_rectangular_beam_with_velocity(self, N, J, q, m, v, dvp, dvt, c, dir1, dir2, size1, size2)

    def add_3d_KV_beam_with_emittance(self, N, I, q, m, E0, a1, b1, e1, a2, b2, e2, c, dir1, dir2):
        return _pybsimu.ParticleDataBase3D_add_3d_KV_beam_with_emittance(self, N, I, q, m, E0, a1, b1, e1, a2, b2, e2, c, dir1, dir2)

    def add_3d_waterbag_beam_with_emittance(self, N, I, q, m, E0, a1, b1, e1, a2, b2, e2, c, dir1, dir2):
        return _pybsimu.ParticleDataBase3D_add_3d_waterbag_beam_with_emittance(self, N, I, q, m, E0, a1, b1, e1, a2, b2, e2, c, dir1, dir2)

    def add_3d_gaussian_beam_with_emittance(self, N, I, q, m, E0, a1, b1, e1, a2, b2, e2, c, dir1, dir2):
        return _pybsimu.ParticleDataBase3D_add_3d_gaussian_beam_with_emittance(self, N, I, q, m, E0, a1, b1, e1, a2, b2, e2, c, dir1, dir2)

    def trajectories_at_free_plane(self, tdata, c, o, p, diagnostics):
        return _pybsimu.ParticleDataBase3D_trajectories_at_free_plane(self, tdata, c, o, p, diagnostics)

    def export_path_manager_data(self, filename, ref_E, ref_q, ref_m, c, o, p):
        return _pybsimu.ParticleDataBase3D_export_path_manager_data(self, filename, ref_E, ref_q, ref_m, c, o, p)

    def save(self, *args):
        return _pybsimu.ParticleDataBase3D_save(self, *args)

    def debug_print(self, os):
        return _pybsimu.ParticleDataBase3D_debug_print(self, os)
ParticleDataBase3D_swigregister = _pybsimu.ParticleDataBase3D_swigregister
ParticleDataBase3D_swigregister(ParticleDataBase3D)

PLOTTER_HPP = _pybsimu.PLOTTER_HPP
class Plotter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plotter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plotter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set_size(self, width, height):
        return _pybsimu.Plotter_set_size(self, width, height)

    def set_font_size(self, size):
        return _pybsimu.Plotter_set_font_size(self, size)

    def set_ranges(self, xmin, ymin, xmax, ymax):
        return _pybsimu.Plotter_set_ranges(self, xmin, ymin, xmax, ymax)

    def get_ranges(self, xmin, ymin, xmax, ymax):
        return _pybsimu.Plotter_get_ranges(self, xmin, ymin, xmax, ymax)

    def plot_png(self, filename):
        return _pybsimu.Plotter_plot_png(self, filename)
Plotter_swigregister = _pybsimu.Plotter_swigregister
Plotter_swigregister(Plotter)

GEOMPLOT_HPP = _pybsimu.GEOMPLOT_HPP
class GeomPlot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomPlot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeomPlot, name)
    __repr__ = _swig_repr

    def __init__(self, frame, geom):
        this = _pybsimu.new_GeomPlot(frame, geom)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_GeomPlot
    __del__ = lambda self: None

    def build_plot(self):
        return _pybsimu.GeomPlot_build_plot(self)

    def disable_cache(self):
        return _pybsimu.GeomPlot_disable_cache(self)

    def set_epot(self, epot):
        return _pybsimu.GeomPlot_set_epot(self, epot)

    def set_eqlines_manual(self, pot):
        return _pybsimu.GeomPlot_set_eqlines_manual(self, pot)

    def get_eqlines_manual(self):
        return _pybsimu.GeomPlot_get_eqlines_manual(self)

    def set_eqlines_auto(self, N):
        return _pybsimu.GeomPlot_set_eqlines_auto(self, N)

    def get_eqlines_auto(self):
        return _pybsimu.GeomPlot_get_eqlines_auto(self)

    def set_bfield(self, bfield):
        return _pybsimu.GeomPlot_set_bfield(self, bfield)

    def get_bfield(self):
        return _pybsimu.GeomPlot_get_bfield(self)

    def set_efield(self, efield):
        return _pybsimu.GeomPlot_set_efield(self, efield)

    def get_efield(self):
        return _pybsimu.GeomPlot_get_efield(self)

    def set_trajdens(self, tdens):
        return _pybsimu.GeomPlot_set_trajdens(self, tdens)

    def get_trajdens(self):
        return _pybsimu.GeomPlot_get_trajdens(self)

    def set_scharge(self, scharge):
        return _pybsimu.GeomPlot_set_scharge(self, scharge)

    def get_scharge(self):
        return _pybsimu.GeomPlot_get_scharge(self)

    def set_fieldgraph_plot(self, fieldplot):
        return _pybsimu.GeomPlot_set_fieldgraph_plot(self, fieldplot)

    def fieldgraph(self, *args):
        return _pybsimu.GeomPlot_fieldgraph(self, *args)

    def enable_colormap_legend(self, enable):
        return _pybsimu.GeomPlot_enable_colormap_legend(self, enable)

    def set_particle_database(self, pdb):
        return _pybsimu.GeomPlot_set_particle_database(self, pdb)

    def set_particledatabase(self, pdb):
        return _pybsimu.GeomPlot_set_particledatabase(self, pdb)

    def set_particle_div(self, particle_div, particle_offset=0):
        return _pybsimu.GeomPlot_set_particle_div(self, particle_div, particle_offset)

    def get_particle_div(self):
        return _pybsimu.GeomPlot_get_particle_div(self)

    def get_particle_offset(self):
        return _pybsimu.GeomPlot_get_particle_offset(self)

    def set_qm_discretation(self, enable):
        return _pybsimu.GeomPlot_set_qm_discretation(self, enable)

    def get_qm_discretation(self):
        return _pybsimu.GeomPlot_get_qm_discretation(self)

    def set_mesh(self, enable):
        return _pybsimu.GeomPlot_set_mesh(self, enable)

    def get_mesh(self):
        return _pybsimu.GeomPlot_get_mesh(self)

    def set_view(self, view, level=-1):
        return _pybsimu.GeomPlot_set_view(self, view, level)

    def set_view_si(self, view, level):
        return _pybsimu.GeomPlot_set_view_si(self, view, level)

    def get_view(self):
        return _pybsimu.GeomPlot_get_view(self)

    def get_level(self):
        return _pybsimu.GeomPlot_get_level(self)

    def get_level_si(self):
        return _pybsimu.GeomPlot_get_level_si(self)

    def vb(self, i):
        return _pybsimu.GeomPlot_vb(self, i)

    def get_vb(self, vb):
        return _pybsimu.GeomPlot_get_vb(self, vb)

    def frame(self):
        return _pybsimu.GeomPlot_frame(self)
GeomPlot_swigregister = _pybsimu.GeomPlot_swigregister
GeomPlot_swigregister(GeomPlot)

GEOMPLOTTER_HPP = _pybsimu.GEOMPLOTTER_HPP
class GeomPlotter(Plotter, GeomPlot):
    __swig_setmethods__ = {}
    for _s in [Plotter, GeomPlot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeomPlotter, name, value)
    __swig_getmethods__ = {}
    for _s in [Plotter, GeomPlot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeomPlotter, name)
    __repr__ = _swig_repr

    def __init__(self, geom):
        this = _pybsimu.new_GeomPlotter(geom)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_GeomPlotter
    __del__ = lambda self: None
GeomPlotter_swigregister = _pybsimu.GeomPlotter_swigregister
GeomPlotter_swigregister(GeomPlotter)

TYPES_HPP = _pybsimu.TYPES_HPP
MODE_1D = _pybsimu.MODE_1D
MODE_2D = _pybsimu.MODE_2D
MODE_CYL = _pybsimu.MODE_CYL
MODE_3D = _pybsimu.MODE_3D
FIELD_EXTRAPOLATE = _pybsimu.FIELD_EXTRAPOLATE
FIELD_MIRROR = _pybsimu.FIELD_MIRROR
FIELD_ANTIMIRROR = _pybsimu.FIELD_ANTIMIRROR
FIELD_SYMMETRIC_POTENTIAL = _pybsimu.FIELD_SYMMETRIC_POTENTIAL
FIELD_ZERO = _pybsimu.FIELD_ZERO
FIELD_NAN = _pybsimu.FIELD_NAN
FIELD_NONE = _pybsimu.FIELD_NONE
FIELD_EPOT = _pybsimu.FIELD_EPOT
FIELD_SCHARGE = _pybsimu.FIELD_SCHARGE
FIELD_TRAJDENS = _pybsimu.FIELD_TRAJDENS
FIELD_EFIELD = _pybsimu.FIELD_EFIELD
FIELD_EFIELD_X = _pybsimu.FIELD_EFIELD_X
FIELD_EFIELD_Y = _pybsimu.FIELD_EFIELD_Y
FIELD_EFIELD_Z = _pybsimu.FIELD_EFIELD_Z
FIELD_BFIELD = _pybsimu.FIELD_BFIELD
FIELD_BFIELD_X = _pybsimu.FIELD_BFIELD_X
FIELD_BFIELD_Y = _pybsimu.FIELD_BFIELD_Y
FIELD_BFIELD_Z = _pybsimu.FIELD_BFIELD_Z
BOUND_DIRICHLET = _pybsimu.BOUND_DIRICHLET
BOUND_NEUMANN = _pybsimu.BOUND_NEUMANN
PARTICLE_T = _pybsimu.PARTICLE_T
PARTICLE_X = _pybsimu.PARTICLE_X
PARTICLE_VX = _pybsimu.PARTICLE_VX
PARTICLE_Y = _pybsimu.PARTICLE_Y
PARTICLE_VY = _pybsimu.PARTICLE_VY
PARTICLE_R = _pybsimu.PARTICLE_R
PARTICLE_VR = _pybsimu.PARTICLE_VR
PARTICLE_W = _pybsimu.PARTICLE_W
PARTICLE_Z = _pybsimu.PARTICLE_Z
PARTICLE_VZ = _pybsimu.PARTICLE_VZ
TRAJECTORY_INTERPOLATION_POLYNOMIAL = _pybsimu.TRAJECTORY_INTERPOLATION_POLYNOMIAL
TRAJECTORY_INTERPOLATION_LINEAR = _pybsimu.TRAJECTORY_INTERPOLATION_LINEAR
SCHARGE_DEPOSITION_PIC = _pybsimu.SCHARGE_DEPOSITION_PIC
SCHARGE_DEPOSITION_LINEAR = _pybsimu.SCHARGE_DEPOSITION_LINEAR
AXIS_X = _pybsimu.AXIS_X
AXIS_Y = _pybsimu.AXIS_Y
AXIS_R = _pybsimu.AXIS_R
AXIS_Z = _pybsimu.AXIS_Z
DIAG_NONE = _pybsimu.DIAG_NONE
DIAG_T = _pybsimu.DIAG_T
DIAG_X = _pybsimu.DIAG_X
DIAG_VX = _pybsimu.DIAG_VX
DIAG_Y = _pybsimu.DIAG_Y
DIAG_R = _pybsimu.DIAG_R
DIAG_VY = _pybsimu.DIAG_VY
DIAG_VR = _pybsimu.DIAG_VR
DIAG_W = _pybsimu.DIAG_W
DIAG_VTHETA = _pybsimu.DIAG_VTHETA
DIAG_Z = _pybsimu.DIAG_Z
DIAG_VZ = _pybsimu.DIAG_VZ
DIAG_O = _pybsimu.DIAG_O
DIAG_VO = _pybsimu.DIAG_VO
DIAG_P = _pybsimu.DIAG_P
DIAG_VP = _pybsimu.DIAG_VP
DIAG_Q = _pybsimu.DIAG_Q
DIAG_VQ = _pybsimu.DIAG_VQ
DIAG_XP = _pybsimu.DIAG_XP
DIAG_YP = _pybsimu.DIAG_YP
DIAG_RP = _pybsimu.DIAG_RP
DIAG_AP = _pybsimu.DIAG_AP
DIAG_ZP = _pybsimu.DIAG_ZP
DIAG_OP = _pybsimu.DIAG_OP
DIAG_PP = _pybsimu.DIAG_PP
DIAG_CURR = _pybsimu.DIAG_CURR
DIAG_EK = _pybsimu.DIAG_EK
DIAG_QM = _pybsimu.DIAG_QM
DIAG_CHARGE = _pybsimu.DIAG_CHARGE
DIAG_MASS = _pybsimu.DIAG_MASS
DIAG_NO = _pybsimu.DIAG_NO
SCALARFIELD_HPP = _pybsimu.SCALARFIELD_HPP
class ScalarField(Field):
    __swig_setmethods__ = {}
    for _s in [Field]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarField, name, value)
    __swig_getmethods__ = {}
    for _s in [Field]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarField, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pybsimu.delete_ScalarField
    __del__ = lambda self: None

    def __call__(self, x):
        return _pybsimu.ScalarField___call__(self, x)
ScalarField_swigregister = _pybsimu.ScalarField_swigregister
ScalarField_swigregister(ScalarField)

MESHSCALARFIELD_HPP = _pybsimu.MESHSCALARFIELD_HPP
class MeshScalarField(ScalarField, Mesh):
    __swig_setmethods__ = {}
    for _s in [ScalarField, Mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshScalarField, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarField, Mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeshScalarField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_MeshScalarField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_MeshScalarField
    __del__ = lambda self: None

    def clear(self):
        return _pybsimu.MeshScalarField_clear(self)

    def reset(self, geom_mode, size, origo, h):
        return _pybsimu.MeshScalarField_reset(self, geom_mode, size, origo, h)

    def get_minmax(self, min, max):
        return _pybsimu.MeshScalarField_get_minmax(self, min, max)

    def copy(self, f):
        return _pybsimu.MeshScalarField_copy(self, f)

    def __iadd__(self, f):
        return _pybsimu.MeshScalarField___iadd__(self, f)

    def __isub__(self, f):
        return _pybsimu.MeshScalarField___isub__(self, f)

    def __imul__(self, x):
        return _pybsimu.MeshScalarField___imul__(self, x)

    def __itruediv__(self, *args):
        return _pybsimu.MeshScalarField___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __call__(self, *args):
        return _pybsimu.MeshScalarField___call__(self, *args)

    def save(self, *args):
        return _pybsimu.MeshScalarField_save(self, *args)

    def debug_print(self, os):
        return _pybsimu.MeshScalarField_debug_print(self, os)
MeshScalarField_swigregister = _pybsimu.MeshScalarField_swigregister
MeshScalarField_swigregister(MeshScalarField)

EPOT_FIELD_HPP = _pybsimu.EPOT_FIELD_HPP
class EpotField(MeshScalarField):
    __swig_setmethods__ = {}
    for _s in [MeshScalarField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpotField, name, value)
    __swig_getmethods__ = {}
    for _s in [MeshScalarField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EpotField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_EpotField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_EpotField
    __del__ = lambda self: None

    def geom(self):
        return _pybsimu.EpotField_geom(self)

    def __call__(self, *args):
        return _pybsimu.EpotField___call__(self, *args)
EpotField_swigregister = _pybsimu.EpotField_swigregister
EpotField_swigregister(EpotField)

EPOT_EFIELD_HPP = _pybsimu.EPOT_EFIELD_HPP
class EpotEfield(VectorField):
    __swig_setmethods__ = {}
    for _s in [VectorField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EpotEfield, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EpotEfield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pybsimu.new_EpotEfield(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pybsimu.delete_EpotEfield
    __del__ = lambda self: None

    def recalculate(self):
        return _pybsimu.EpotEfield_recalculate(self)

    def __call__(self, x):
        return _pybsimu.EpotEfield___call__(self, x)

    def debug_print(self, os):
        return _pybsimu.EpotEfield_debug_print(self, os)

    def set_extrapolation(self, *args):
        return _pybsimu.EpotEfield_set_extrapolation(self, *args)
EpotEfield_swigregister = _pybsimu.EpotEfield_swigregister
EpotEfield_swigregister(EpotEfield)


def __bddd_0(x, y, z):
    return _pybsimu.__bddd_0(x, y, z)
__bddd_0 = _pybsimu.__bddd_0

def __bddd_1(x, y, z):
    return _pybsimu.__bddd_1(x, y, z)
__bddd_1 = _pybsimu.__bddd_1

def init_bddd():
    return _pybsimu.init_bddd()
init_bddd = _pybsimu.init_bddd

def bddd(k):
    return _pybsimu.bddd(k)
bddd = _pybsimu.bddd
class op_bool_double_double_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, op_bool_double_double_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, op_bool_double_double_double, name)
    __repr__ = _swig_repr

    def zzz(self, id):
        return _pybsimu.op_bool_double_double_double_zzz(self, id)

    def handle(self, x, y, z):
        return _pybsimu.op_bool_double_double_double_handle(self, x, y, z)
    __swig_destroy__ = _pybsimu.delete_op_bool_double_double_double
    __del__ = lambda self: None

    def __init__(self):
        if self.__class__ == op_bool_double_double_double:
            _self = None
        else:
            _self = self
        this = _pybsimu.new_op_bool_double_double_double(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _pybsimu.disown_op_bool_double_double_double(self)
        return weakref_proxy(self)
op_bool_double_double_double_swigregister = _pybsimu.op_bool_double_double_double_swigregister
op_bool_double_double_double_swigregister(op_bool_double_double_double)



from functools import partial

class RAPPER(op_bool_double_double_double):

    def __init__(self, callback, id):
        op_bool_double_double_double.__init__(self)
        self._callback = callback
        self.zzz(0)

    def handle(self, x, y, z):
#print('in handle')
        return self._callback(x, y, z)


# This file is compatible with both classic and new-style classes.


